{
  "name": "夏日北冰洋的GitHub博客",
  "tagline": "夏日北冰洋GitHub博客",
  "body": "# ppneo\r\n夏日北冰洋的CSDN博客\r\n\r\n\r\n# 关于文件状态\r\n一般仓库中的文件可能存在于这4种状态：\r\n 1）Untracked files                     → 文件未被跟踪（A）\r\n 2）Untracked but not Change   → 已跟踪，但是未修改（B）\r\n 3）Changes but not updated     → 已跟踪，文件被修改，但并没有添加到暂存区（C）\r\n 4）Changes to be committed    → 已跟踪，文件被修改，已添加到暂存区，这是下次提交的内容（D）\r\n\r\n# 常用GIT命令\r\n1. git clone  （B）\r\n说明：将代码克隆到本地（本地：当前控制台进入的目录）\r\n\r\n2. git add   （A->D）\r\ngit add <filePath/folderPath>  说明：将指定新文件添加到本地暂存区（可以是一个文件，也可以是一个文件夹下面的所有文件）\r\ngit add .                                    说明：将所有的新文件提交暂存区\r\ngit add --all                              说明：将所有的新文件提交暂存区\r\n\r\n3.  git reset HEAD <filePath/folderPath> （D->A）\r\n说明：将新添加的文件撤出暂存区\r\n\r\n4. git commit  （C->D）\r\ngit commit <filePath/folderPath>  说明： 将指定文件修改提交到本地暂存区（可以是一个文件，也可以是一个文件夹下面的所有文件）\r\ngit commit -a                                  说明：将所有修改过的工作文件提交暂存区git \r\n\r\n5. git log\r\n说明：查看commit提交日志(每次提交会生成唯一的commit_ID)\r\n6. git reset\r\ngit reset  --soft  commit_ID       说明：将当前工作区恢复到commit_ID指示的那次状态， 工作区代码的修改保留  （D->C）\r\ngit reset  --hard commit_ID    说明：将当前工作区恢复到commit_ID指示的那次状态， 工作区代码的修改同时被强制回退到修改之前的状态  （D->B）\r\n\r\n7. git push  （D->B）\r\ngit push                                 说明：将提交到暂存区的修改推送到远程仓库\r\ngit push -u origin master   说明：clone到本地后的初次提交\r\n\r\n8. git pull  （B->B）\r\n说明：将远程仓库更新到本地\r\n\r\n9. git diff  <filePath/folderPath>\r\n说明：比较当前文件和暂存区文件差异（一个文件或者文件夹下面的所有文件）\r\n\r\n10. git status\r\n说明：扫描当前工作区的所有改动，包括文件的增加、删除、修改\r\n\r\n11. git checkout \r\ngit checkout <filePath/folderPath>  说明：撤销本地修改（可以是一个文件，也可以是一个文件夹下面的所有文件）\r\ngit checkout -f                                  说明：撤销本地所有修改\r\n\r\n\r\n# 关于冲突\r\n大部分代码冲突是以下情况产生： 本地代码未更新到远程仓库的最新状态， 然后本地修改之后进行pull操作， 如果远程仓库的代码和本地修改代码部分有重叠部分，这部分就会产生冲突。\r\n![](http://mail.chaoqiankeji.com/attachment/downloadex?ri=%2Falimail%2FinternalLinks%2FrefreshToken&o=1&et=normal&f=49491bea-6d67-4e7e-9b89-21412c142495&e=liang%40chaoqiankeji.com&n=temp4cj.png&m=2_0%3ADzzzzycSZzP%24----50ep85w&ext=png)\r\n\r\n这时把本地修改commit提交之后，进行pull操作\r\n![](http://mail.chaoqiankeji.com/attachment/downloadex?ri=%2Falimail%2FinternalLinks%2FrefreshToken&o=1&et=normal&f=6caab19b-b140-4a6d-a386-3aad4bd96a6c&e=liang%40chaoqiankeji.com&n=temp4cj.png&m=2_0%3ADzzzzycSZzP%24----50ep85w&ext=png)\r\n\r\n查看冲突文件如下：\r\n![](http://mail.chaoqiankeji.com/attachment/downloadex?ri=%2Falimail%2FinternalLinks%2FrefreshToken&o=1&et=normal&f=ac8bc3e4-b583-4cd4-9001-671a0fcf7778&e=liang%40chaoqiankeji.com&n=temp4cj.png&m=2_0%3ADzzzzycSZzP%24----50ep85w&ext=png)\r\n<<<<<  和  >>>>>>>之间的就是冲突代码， \"===========\"之上的是本地的修改， \"===========\"之下的是远程仓库的最新代码\r\n然后根据实际情况，合并本地的修改和远程仓库的修改， 然后再进行commit操作即可。\r\n\r\n\r\n# 关于文件的跟踪设置\r\n如果我们希望项目目录下面的某些文件的增删改不被跟踪（即不进入远程仓库），尤其是是编译生成的中间文件和目标文件，需要在.gitignore中进行设置，\r\n可以忽略某个文件夹，也可以忽略某个后缀的一类文件。如果项目跟目录下没有该文件（.gitignore是个隐藏文件），则可以手动创建： 以.gitignore为文件名的一个文本文件。\r\n例如：\r\n![](http://mail.chaoqiankeji.com/attachment/downloadex?ri=%2Falimail%2FinternalLinks%2FrefreshToken&o=1&et=normal&f=12afe0b6-7811-4b9e-b2b5-464f09735c36&e=liang%40chaoqiankeji.com&n=temp4cj.png&m=2_0%3ADzzzzycSZzP%24----50ep85w&ext=png)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}